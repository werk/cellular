[properties]

Tile(Rock | Shaft | Cave | Building)

Light(0..5)
Vein(OreType)
Dig(0..1)

Foreground(Imp | ResourceType | Empty)
Background(Empty)

BuildingVariant(SmallChest | BigChest)

DirectionH(Left | Right)
DirectionHV(Left | Right | Up | Down)

ImpStep(0..2)

Content(ResourceType | Empty)
SmallContentCount(0..10)
BigContentCount(0..100)

ShaftForeground(Empty | ShaftImp)


[materials]

Rock { Light Vein Dig }
Shaft { DirectionHV ShaftForeground }
Cave { Foreground Background }
Building { BuildingVariant }

ShaftImp { Content }

Empty

Left
Right
Up
Down

RockOre
IronOre
CoalOre

Imp { DirectionH ImpStep Content }

SmallChest { Content SmallContentCount }
BigChest { Content BigContentCount }


[types]

OreType = RockOre | IronOre | CoalOre.
ResourceType = OreType.


[function rotate(direction value) value]

getTransform()
: 1 =>   (direction : Left => Right ; Right => Left ; _ => direction)
; 2 =>   (direction : Up   => Down  ; Down  => Up   ; _ => direction)
; 90 =>  (direction : Left => Down  ; Right => Up   ; Up => Left  ; Down => Right)
; 180 => (direction : Left => Right ; Right => Left ; Up => Down  ; Down => Up)
; 270 => (direction : Left => Up    ; Right => Down ; Up => Right ; Down => Left)
; _ => direction


[group generateGroup]

[rule generateCave]

_.
-- getStep() == 0 ->
getTileX() > 5 && getTileX() < 15 && getTileY() > 5 && getTileY() < 15
    -> Cave Foreground(Empty) Background(Empty).
    | Rock Light(0) Vein(RockOre) Dig(0).

[rule generateDig]

_.
-- getStep() == 0 && getTileX() >= 15 && getTileX() < 25 && getTileY() > 5 && getTileY() < 15 ->
Rock Light(0) Vein(RockOre) Dig(1).

[rule generateChest]

_.
-- getStep() == 0 && getTileX() == 6 && getTileY() == 7 ->
Building BuildingVariant(BigChest Content(RockOre) BigContentCount(0)).

[rule generateImp1 Foreground]

_.
-- getStep() == 0 && getTileX() == 9 && getTileY() == 7 ->
Imp DirectionH(Left) ImpStep(0) Content(Empty).

[rule generateImp2 Foreground]

_.
-- getStep() == 0 && getTileX() == 11 && getTileY() == 6 ->
Imp DirectionH(Right) ImpStep(0) Content(Empty).


[group rockLightGroup @r]

[rule rockLightBoundary]

a Rock.
b.
--
(b : Rock => 0 ; _ => 1) ->
a Light(5).
b.

[rule rockLight]

a Rock Light(x).
b Rock Light(y).
-- x + 1 < y ->
a Light(x + 1).
b.


[group shaftGroup !shaftGroup]

[rule shaftEnter @r]

a ShaftForeground(Empty) DirectionHV(d).
b Foreground(i Imp ImpStep(2) Content(Empty)).
-- d === rotate(Up) ->
a ShaftForeground(ShaftImp Content(Empty)).
b Foreground(Empty).

[rule shaftExit @r]

a ShaftForeground(ShaftImp Content(c)) DirectionHV(d).
b Foreground(Empty).
-- d === rotate(Up) ->
d2 = (d : Right => Left ; _ => Right).
a ShaftForeground(Empty).
b Foreground(Imp DirectionH(d2) ImpStep(0) Content(c)).

[rule shaftSwapEnter @r]

a ShaftForeground(ShaftImp Content(c)) DirectionHV(d).
b Foreground(Imp ImpStep(2) Content(Empty)).
-- d === rotate(Up) ->
d2 = (d : Right => Left ; _ => Right).
a ShaftForeground(ShaftImp Content(Empty)).
b Foreground(Imp DirectionH(d2) ImpStep(0) Content(c)).

[rule shaftDigEnter @r]

a Rock Vein(ore) Dig(1).
b Foreground(i Imp ImpStep(2) Content(Empty)).
--
Shaft ShaftForeground(ShaftImp Content(ore)) DirectionHV(rotate(Up)).
b Foreground(Empty).

[rule shaftDig @r]

a Rock Vein(ore) Dig(1).
b Shaft ShaftForeground(ShaftImp Content(Empty)).
--
Shaft ShaftForeground(ShaftImp Content(ore)) DirectionHV(rotate(Up)).
b ShaftForeground(Empty).

[rule shaftAscend @r]

a ShaftForeground(Empty) DirectionHV(d).
b ShaftForeground(i ShaftImp Content(Empty)).
-- d === rotate(Up) ->
a ShaftForeground(i).
b ShaftForeground(Empty).

[rule shaftDescend @r]

a ShaftForeground(i ShaftImp Content(c)) DirectionHV(d).
b ShaftForeground(Empty).
-- d === rotate(Up) && c !== Empty ->
a ShaftForeground(Empty).
b ShaftForeground(i).

[rule shaftSwap @r]

a ShaftForeground(i1 ShaftImp Content(c)) DirectionHV(d).
b ShaftForeground(i2 ShaftImp Content(Empty)).
-- d === rotate(Up) && c !== Empty ->
a ShaftForeground(i2).
b ShaftForeground(i1).


[group impMoveGroup]

[rule impStep @h]

_.
a Foreground(i Imp ImpStep(s) DirectionH(d)).
Rock.
-- d === rotate(Right) ->
a Foreground(i ImpStep(s + 1)).

[rule impWalk !impStep @h]

_, _.
a Foreground(i Imp ImpStep(2) DirectionH(d)), b Foreground(Empty).
Rock, Rock.
-- d === rotate(Right) ->
a Foreground(Empty), b Foreground(i ImpStep(0)).

[rule impFall]

a Foreground(i Imp).
b Foreground(Empty).
--
a Foreground(Empty).
b Foreground(i).

[rule impSwap]

a Foreground(i1 Imp ImpStep(2) DirectionH(Right)), b Foreground(i2 Imp ImpStep(2) DirectionH(Left)).
--
a Foreground(i2 ImpStep(0)), b Foreground(i1 ImpStep(0)).

[rule impTurn !impMoveGroup @h]

a Foreground(i Imp ImpStep(2) DirectionH(d)), b Rock.
-- d === rotate(Right) ->
a Foreground(i ImpStep(0) DirectionH(rotate(Left))), b.


[group chestGroup]

[rule chestPut]

x BuildingVariant(b BigChest Content(c) BigContentCount(n)).
y Foreground(i Imp ImpStep(2) Content(c)).
-- c !== Empty ->
x BuildingVariant(b BigContentCount(n + 1)).
y Foreground(i Content(Empty)).
