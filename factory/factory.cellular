[properties]

Tile(Rock | Shaft | Cave | Building)

Light(0..5)
Vein(OreType)
Dig(0..1)

Foreground(None | Imp | ResourceType)
Background(None | Ladder | Sign)

BuildingVariant(SmallChest | BigChest)

DirectionH(Left | Right)
DirectionV(Up | Down)
DirectionHV(Left | Right | Up | Down)

ImpClimb(None | Up | Down)

ImpStep(0..2)

Content(None | ResourceType)
SmallContentCount(0..10)
BigContentCount(0..100)

ShaftForeground(None | ShaftImp)


[materials]

Rock { Light Vein Dig }
Shaft { DirectionHV ShaftForeground }
Cave { Foreground Background }
Building { BuildingVariant }

ShaftImp { Content }

None

Left
Right
Up
Down

RockOre
IronOre
CoalOre

Imp { DirectionH ImpClimb ImpStep Content }

SmallChest { Content SmallContentCount }
BigChest { Content BigContentCount }

Ladder
Sign { DirectionV }


[types]

OreType = RockOre | IronOre | CoalOre.
ResourceType = OreType.


[function rotate(direction value) value]

getTransform()
: 1 =>   (direction : Left => Right ; Right => Left ; _ => direction)
; 2 =>   (direction : Up   => Down  ; Down  => Up   ; _ => direction)
; 90 =>  (direction : Left => Down  ; Right => Up   ; Up => Left  ; Down => Right)
; 180 => (direction : Left => Right ; Right => Left ; Up => Down  ; Down => Up)
; 270 => (direction : Left => Up    ; Right => Down ; Up => Right ; Down => Left)
; _ => direction


[function walkable(tile value) bool]

(tile
    : Rock => 1
    ; Background(Ladder) => 1
    ; _ => 0
) == 1


[group generateGroup]

[rule generateCave]

_.
-- getStep() == 0 ->
getTileX() > 5 && getTileX() < 15 && getTileY() > 5 && getTileY() < 15
    -> Cave Foreground(None) Background(None).
    | Rock Light(0) Vein(RockOre) Dig(0).

[rule generateDig]

_.
-- getStep() == 0 && getTileX() >= 15 && getTileX() < 25 && getTileY() > 5 && getTileY() < 15 ->
Rock Light(0) Vein(RockOre) Dig(1).

[rule generateChest]

_.
-- getStep() == 0 && getTileX() == 6 && getTileY() == 7 ->
Building BuildingVariant(BigChest Content(RockOre) BigContentCount(0)).

[rule generateImps Foreground]

_.
-- getStep() == 0 ->
(getTileX() == 8 && getTileY() == 6) ||
(getTileX() == 9 && getTileY() == 7) ||
(getTileX() == 10 && getTileY() == 9) ||
(getTileX() == 11 && getTileY() == 6) ||
(getTileX() == 12 && getTileY() == 7) ->
Imp DirectionH(Left) ImpClimb(None) ImpStep(0) Content(None).


[group generateGroup2]

[rule generateCave2]

_.
-- getStep() == 0 ->
getTileX() > 5 && getTileX() < 15 && getTileY() > 20 && getTileY() < 30
    -> Cave Foreground(None) Background(None).

[rule generateLadder2]

c Cave.
-- getStep() == 0 ->
getTileX() == 10 && getTileY() > 20 && getTileY() <= 25
    -> c Background(Ladder).

[rule generateImp2]

c Cave.
-- getStep() == 0 ->
(getTileX() == 6 || getTileX() == 7 || getTileX() == 12 || getTileX() == 14) && getTileY() == 21
    -> c Foreground(Imp DirectionH(Left) ImpClimb(None) ImpStep(0) Content(None)).

[rule generateSign2a]

c Cave.
-- getStep() == 0 ->
(getTileX() == 9 || getTileX() == 11) && getTileY() == 21
    -> c Background(Sign DirectionV(Up)).

[rule generateSign2b]

c Cave.
-- getStep() == 0 ->
(getTileX() == 9 || getTileX() == 11) && getTileY() == 25
    -> c Background(Sign DirectionV(Down)).

[rule generatePlatform2]

c.
-- getStep() == 0 ->
getTileX() > 7 && getTileX() < 13 && getTileY() == 24
    -> c Background(Ladder).


[group rockLightGroup @r]

[rule rockLightBoundary]

a Rock.
b.
--
(b : Rock => 0 ; _ => 1) ->
a Light(5).
b.

[rule rockLight]

a Rock Light(x).
b Rock Light(y).
-- x + 1 < y ->
a Light(x + 1).
b.


[group shaftGroup !shaftGroup]

[rule shaftEnter @r]

a ShaftForeground(None) DirectionHV(d).
b Foreground(i Imp ImpStep(2) ImpClimb(None) Content(None)).
-- d === rotate(Up) ->
a ShaftForeground(ShaftImp Content(None)).
b Foreground(None).

[rule shaftExit @r]

a ShaftForeground(ShaftImp Content(c)) DirectionHV(d).
b Foreground(None).
-- d === rotate(Up) ->
d2 = (d : Right => Left ; _ => Right).
a ShaftForeground(None).
b Foreground(Imp DirectionH(d2) ImpClimb(None) ImpStep(0) Content(c)).

[rule shaftSwapEnter @r]

a ShaftForeground(ShaftImp Content(c)) DirectionHV(d).
b Foreground(Imp ImpStep(2) ImpClimb(None) Content(None)).
-- d === rotate(Up) ->
d2 = (d : Right => Left ; _ => Right).
a ShaftForeground(ShaftImp Content(None)).
b Foreground(Imp DirectionH(d2) ImpClimb(None) ImpStep(0) Content(c)).

[rule shaftDigEnter @r]

a Rock Vein(ore) Dig(1).
b Foreground(i Imp ImpStep(2) ImpClimb(None) Content(None)).
--
Shaft ShaftForeground(ShaftImp Content(ore)) DirectionHV(rotate(Up)).
b Foreground(None).

[rule shaftDig @r]

a Rock Vein(ore) Dig(1).
b Shaft ShaftForeground(ShaftImp Content(None)).
--
Shaft ShaftForeground(ShaftImp Content(ore)) DirectionHV(rotate(Up)).
b ShaftForeground(None).

[rule shaftAscend @r]

a ShaftForeground(None) DirectionHV(d).
b ShaftForeground(i ShaftImp Content(None)).
-- d === rotate(Up) ->
a ShaftForeground(i).
b ShaftForeground(None).

[rule shaftDescend @r]

a ShaftForeground(i ShaftImp Content(c)) DirectionHV(d).
b ShaftForeground(None).
-- d === rotate(Up) && c !== None ->
a ShaftForeground(None).
b ShaftForeground(i).

[rule shaftSwap @r]

a ShaftForeground(i1 ShaftImp Content(c)) DirectionHV(d).
b ShaftForeground(i2 ShaftImp Content(None)).
-- d === rotate(Up) && c !== None ->
a ShaftForeground(i2).
b ShaftForeground(i1).

[rule shaftRemove @r]

_, u, _.
l, c DirectionHV(d), r.
_, _, _.
-- d === rotate(Up) ->
x = (l : Shaft DirectionHV(xd) => (xd === rotate(Left) -> 1 | 0); Dig(1) => 1; _ => 0).
y = (r : Shaft DirectionHV(yd) => (yd === rotate(Right) -> 1 | 0); Dig(1) => 1; _ => 0).
z = (u : Shaft DirectionHV(zd) => (zd === rotate(Up) -> 1 | 0); Dig(1) => 1; _ => 0).
x == 0 && y == 0 && z == 0 ->
c : ShaftForeground(None) => Cave Foreground(None) Background(None).
  ; ShaftForeground(i ShaftImp Content(None)) => c ShaftForeground(i Content(RockOre)).


[group impMoveGroup]

[rule impStep @h]

_.
a Foreground(i Imp ImpStep(s) DirectionH(d)).
g.
-- d === rotate(Right) && walkable(g) ->
a Foreground(i ImpStep(s + 1)).

[rule impWalk !impStep @h]

_, _.
a Foreground(i Imp ImpStep(2) DirectionH(d) ImpClimb(None)), b Foreground(None).
g1, g2.
-- d === rotate(Right) && walkable(g1) && walkable(g2) ->
a Foreground(None), b Foreground(i ImpStep(0)).

[rule impFall]

a Foreground(i Imp ImpClimb(None)).
b Foreground(None) Background(l).
-- l !== Ladder ->
a Foreground(None).
b Foreground(i).

[rule impSwap]

a Foreground(i1 Imp ImpStep(2) DirectionH(Right) ImpClimb(None)),
b Foreground(i2 Imp ImpStep(2) DirectionH(Left) ImpClimb(None)).
--
a Foreground(i2 ImpStep(0)),
b Foreground(i1 ImpStep(0)).

[rule impTurn !impMoveGroup @h]

_, _.
a Foreground(i Imp ImpStep(2) DirectionH(d) ImpClimb(None)), b.
_, g.
-- d === rotate(Right) ->
(b : Rock => 1 ; Building => 1 ; _ => 0) == 1 || !walkable(g) ->
a Foreground(i ImpStep(0) DirectionH(rotate(Left))), b.


[group ladderGroup]

[rule ladderEnter @h]

a Background(Sign DirectionV(v)), b Foreground(i Imp DirectionH(h) ImpStep(1) ImpClimb(None)) Background(Ladder), _.
-- h === rotate(Right) ->
b Foreground(i ImpClimb(v) ImpStep(1)).

[rule ladderExit @v]

a.
b Foreground(i Imp ImpClimb(d) ImpStep(s)) Background(Ladder).
_.
-- d === rotate(Up) && s != 0 ->
(a : Background(Ladder) => 1 ; _ => 0) == 0 ->
b Foreground(i ImpClimb(None) ImpStep(1)).

[rule ladderCheck]

a Foreground(i Imp ImpClimb(c)) Background(b).
-- c !== None ->
(b : Ladder => 1 ; _ => 0) == 0 ->
a Foreground(i ImpClimb(None)).

[rule ladderClimb @v]

a Foreground(None) Background(Ladder).
b Foreground(i Imp ImpClimb(d) ImpStep(2)) Background(Ladder).
-- d === rotate(Up) ->
a Foreground(i ImpStep(0)).
b Foreground(None).

[rule ladderSwap]

a Foreground(i1 Imp ImpClimb(Down) ImpStep(2)) Background(Ladder).
b Foreground(i2 Imp ImpClimb(Up) ImpStep(2)) Background(Ladder).
--
a Foreground(i2 ImpStep(0)).
b Foreground(i1 ImpStep(0)).


[group chestGroup]

[rule chestPut]

x BuildingVariant(b BigChest Content(c) BigContentCount(n)).
y Foreground(i Imp ImpStep(2) ImpClimb(None) Content(c)).
-- c !== None ->
x BuildingVariant(b BigContentCount(n + 1)).
y Foreground(i Content(None)).
